#!/usr/bin/python
#-*- coding: utf-8 -*-

import sys
import os
import inspect
import traceback
import subprocess

import re


# test for py2 py3 compatability


#############################################

# Py2/3 compatible tricks

import contextlib
try:
    # Python 2
    from cStringIO import StringIO
except ImportError:
    # Python 3
    from io import StringIO



#############################################
# temporarily replacing sys.stdout and sys.stderr
@contextlib.contextmanager
def capture_sys_output():
    capture_out, capture_err = StringIO(), StringIO()
    current_out, current_err = sys.stdout, sys.stderr
    try:
        sys.stdout, sys.stderr = capture_out, capture_err
        yield sys.stdout, sys.stderr
    finally:
        sys.stdout, sys.stderr = current_out, current_err


def unittest_result_summary(x):
    print( "%s" % x )
    test_result_summary = ""
    searchObj = re.search(r'(Ran \d+ tests)', x, re.M)
    if searchObj:
        test_result_summary += searchObj.group()
        searchObj = re.search(r'(FAILED \(failures=\d+\))', x, re.M)
        if searchObj:
             test_result_summary += ' '+searchObj.group()
        #print ( 'Summary: '+test_result_summary+'\n' )
    return test_result_summary

def launch_test(py_exec_path):
    if not os.path.exists(py_exec_path):
        print ('WARNING: '+py_exec_path+' not exist. '
               'Development environment is not good enough!')
        return ""
    print ('\n################# Launch test with: '
           +py_exec_path+' #################\n')
    p = subprocess.Popen([py_exec_path, "test_virt-dup.py"],
                         universal_newlines=True,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    out, err = p.communicate()
    return unittest_result_summary(out+err)


def main():

    # https://stackoverflow.com/questions/4760215/running-shell-command-and-capturing-the-output
    # https://stackoverflow.com/questions/41542613/utf-8-string-in-python-2-and-3

    PY_PATH="/usr/bin/python2"
    p2_test_result_summary = launch_test(PY_PATH)

    PY_PATH="/usr/bin/python3"
    p3_test_result_summary = launch_test(PY_PATH)

    print ('#####################################################################')
    if p2_test_result_summary == p3_test_result_summary:
        print ('INFO: Python 2 and Python 3 test PASSED.\n')
    else:
        print ('ERROR: Python 2 and Python 3 test FAILED.\n')



if __name__ == '__main__':
    main()



